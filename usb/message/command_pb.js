// source: command.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var header_pb = require('./header_pb.js');
goog.object.extend(proto, header_pb);
goog.exportSymbol('proto.ActuateGroup', null, global);
goog.exportSymbol('proto.ActuateServo', null, global);
goog.exportSymbol('proto.ActuateServo.ArgCase', null, global);
goog.exportSymbol('proto.Command', null, global);
goog.exportSymbol('proto.FlightStabilization', null, global);
goog.exportSymbol('proto.FlightStabilizationMethods', null, global);
goog.exportSymbol('proto.ServoConfig', null, global);
goog.exportSymbol('proto.ServoGroup', null, global);
goog.exportSymbol('proto.ServoState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Command.repeatedFields_, null);
};
goog.inherits(proto.Command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Command.displayName = 'proto.Command';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ActuateGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ActuateGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ActuateGroup.displayName = 'proto.ActuateGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FlightStabilization = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FlightStabilization, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FlightStabilization.displayName = 'proto.FlightStabilization';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ActuateServo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ActuateServo.oneofGroups_);
};
goog.inherits(proto.ActuateServo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ActuateServo.displayName = 'proto.ActuateServo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServoConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServoConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServoConfig.displayName = 'proto.ServoConfig';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Command.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Command.prototype.toObject = function(opt_includeInstance) {
  return proto.Command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Command} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Command.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && header_pb.Header.toObject(includeInstance, f),
    resetProcessor: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    actuateGroup: (f = msg.getActuateGroup()) && proto.ActuateGroup.toObject(includeInstance, f),
    flightStabilization: (f = msg.getFlightStabilization()) && proto.FlightStabilization.toObject(includeInstance, f),
    actuateServoList: jspb.Message.toObjectList(msg.getActuateServoList(),
    proto.ActuateServo.toObject, includeInstance),
    servoConfigList: jspb.Message.toObjectList(msg.getServoConfigList(),
    proto.ServoConfig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Command}
 */
proto.Command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Command;
  return proto.Command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Command}
 */
proto.Command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new header_pb.Header;
      reader.readMessage(value,header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResetProcessor(value);
      break;
    case 3:
      var value = new proto.ActuateGroup;
      reader.readMessage(value,proto.ActuateGroup.deserializeBinaryFromReader);
      msg.setActuateGroup(value);
      break;
    case 4:
      var value = new proto.FlightStabilization;
      reader.readMessage(value,proto.FlightStabilization.deserializeBinaryFromReader);
      msg.setFlightStabilization(value);
      break;
    case 5:
      var value = new proto.ActuateServo;
      reader.readMessage(value,proto.ActuateServo.deserializeBinaryFromReader);
      msg.addActuateServo(value);
      break;
    case 6:
      var value = new proto.ServoConfig;
      reader.readMessage(value,proto.ServoConfig.deserializeBinaryFromReader);
      msg.addServoConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Command} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Command.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      header_pb.Header.serializeBinaryToWriter
    );
  }
  f = message.getResetProcessor();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getActuateGroup();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ActuateGroup.serializeBinaryToWriter
    );
  }
  f = message.getFlightStabilization();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.FlightStabilization.serializeBinaryToWriter
    );
  }
  f = message.getActuateServoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ActuateServo.serializeBinaryToWriter
    );
  }
  f = message.getServoConfigList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.ServoConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.Header}
 */
proto.Command.prototype.getHeader = function() {
  return /** @type{?proto.Header} */ (
    jspb.Message.getWrapperField(this, header_pb.Header, 1));
};


/**
 * @param {?proto.Header|undefined} value
 * @return {!proto.Command} returns this
*/
proto.Command.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Command.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool reset_processor = 2;
 * @return {boolean}
 */
proto.Command.prototype.getResetProcessor = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.setResetProcessor = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional ActuateGroup actuate_group = 3;
 * @return {?proto.ActuateGroup}
 */
proto.Command.prototype.getActuateGroup = function() {
  return /** @type{?proto.ActuateGroup} */ (
    jspb.Message.getWrapperField(this, proto.ActuateGroup, 3));
};


/**
 * @param {?proto.ActuateGroup|undefined} value
 * @return {!proto.Command} returns this
*/
proto.Command.prototype.setActuateGroup = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.clearActuateGroup = function() {
  return this.setActuateGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Command.prototype.hasActuateGroup = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FlightStabilization flight_stabilization = 4;
 * @return {?proto.FlightStabilization}
 */
proto.Command.prototype.getFlightStabilization = function() {
  return /** @type{?proto.FlightStabilization} */ (
    jspb.Message.getWrapperField(this, proto.FlightStabilization, 4));
};


/**
 * @param {?proto.FlightStabilization|undefined} value
 * @return {!proto.Command} returns this
*/
proto.Command.prototype.setFlightStabilization = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.clearFlightStabilization = function() {
  return this.setFlightStabilization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Command.prototype.hasFlightStabilization = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated ActuateServo actuate_servo = 5;
 * @return {!Array<!proto.ActuateServo>}
 */
proto.Command.prototype.getActuateServoList = function() {
  return /** @type{!Array<!proto.ActuateServo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ActuateServo, 5));
};


/**
 * @param {!Array<!proto.ActuateServo>} value
 * @return {!proto.Command} returns this
*/
proto.Command.prototype.setActuateServoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ActuateServo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ActuateServo}
 */
proto.Command.prototype.addActuateServo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ActuateServo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.clearActuateServoList = function() {
  return this.setActuateServoList([]);
};


/**
 * repeated ServoConfig servo_config = 6;
 * @return {!Array<!proto.ServoConfig>}
 */
proto.Command.prototype.getServoConfigList = function() {
  return /** @type{!Array<!proto.ServoConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ServoConfig, 6));
};


/**
 * @param {!Array<!proto.ServoConfig>} value
 * @return {!proto.Command} returns this
*/
proto.Command.prototype.setServoConfigList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.ServoConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ServoConfig}
 */
proto.Command.prototype.addServoConfig = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.ServoConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.clearServoConfigList = function() {
  return this.setServoConfigList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ActuateGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.ActuateGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ActuateGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ActuateGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: jspb.Message.getFieldWithDefault(msg, 1, 0),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ActuateGroup}
 */
proto.ActuateGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ActuateGroup;
  return proto.ActuateGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ActuateGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ActuateGroup}
 */
proto.ActuateGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ServoGroup} */ (reader.readEnum());
      msg.setGroup(value);
      break;
    case 2:
      var value = /** @type {!proto.ServoState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ActuateGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ActuateGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ActuateGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ActuateGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional ServoGroup group = 1;
 * @return {!proto.ServoGroup}
 */
proto.ActuateGroup.prototype.getGroup = function() {
  return /** @type {!proto.ServoGroup} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ServoGroup} value
 * @return {!proto.ActuateGroup} returns this
 */
proto.ActuateGroup.prototype.setGroup = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ServoState state = 2;
 * @return {!proto.ServoState}
 */
proto.ActuateGroup.prototype.getState = function() {
  return /** @type {!proto.ServoState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ServoState} value
 * @return {!proto.ActuateGroup} returns this
 */
proto.ActuateGroup.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FlightStabilization.prototype.toObject = function(opt_includeInstance) {
  return proto.FlightStabilization.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FlightStabilization} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FlightStabilization.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, 0),
    args: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FlightStabilization}
 */
proto.FlightStabilization.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FlightStabilization;
  return proto.FlightStabilization.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FlightStabilization} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FlightStabilization}
 */
proto.FlightStabilization.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.FlightStabilizationMethods} */ (reader.readEnum());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FlightStabilization.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FlightStabilization.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FlightStabilization} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FlightStabilization.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getArgs();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional FlightStabilizationMethods method = 1;
 * @return {!proto.FlightStabilizationMethods}
 */
proto.FlightStabilization.prototype.getMethod = function() {
  return /** @type {!proto.FlightStabilizationMethods} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.FlightStabilizationMethods} value
 * @return {!proto.FlightStabilization} returns this
 */
proto.FlightStabilization.prototype.setMethod = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 args = 2;
 * @return {number}
 */
proto.FlightStabilization.prototype.getArgs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.FlightStabilization} returns this
 */
proto.FlightStabilization.prototype.setArgs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ActuateServo.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.ActuateServo.ArgCase = {
  ARG_NOT_SET: 0,
  STATE: 2,
  VALUE: 3
};

/**
 * @return {proto.ActuateServo.ArgCase}
 */
proto.ActuateServo.prototype.getArgCase = function() {
  return /** @type {proto.ActuateServo.ArgCase} */(jspb.Message.computeOneofCase(this, proto.ActuateServo.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ActuateServo.prototype.toObject = function(opt_includeInstance) {
  return proto.ActuateServo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ActuateServo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ActuateServo.toObject = function(includeInstance, msg) {
  var f, obj = {
    servoNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
    value: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ActuateServo}
 */
proto.ActuateServo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ActuateServo;
  return proto.ActuateServo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ActuateServo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ActuateServo}
 */
proto.ActuateServo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServoNumber(value);
      break;
    case 2:
      var value = /** @type {!proto.ServoState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ActuateServo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ActuateServo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ActuateServo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ActuateServo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServoNumber();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!proto.ServoState} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional uint32 servo_number = 1;
 * @return {number}
 */
proto.ActuateServo.prototype.getServoNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ActuateServo} returns this
 */
proto.ActuateServo.prototype.setServoNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ServoState state = 2;
 * @return {!proto.ServoState}
 */
proto.ActuateServo.prototype.getState = function() {
  return /** @type {!proto.ServoState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ServoState} value
 * @return {!proto.ActuateServo} returns this
 */
proto.ActuateServo.prototype.setState = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.ActuateServo.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ActuateServo} returns this
 */
proto.ActuateServo.prototype.clearState = function() {
  return jspb.Message.setOneofField(this, 2, proto.ActuateServo.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ActuateServo.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 value = 3;
 * @return {number}
 */
proto.ActuateServo.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ActuateServo} returns this
 */
proto.ActuateServo.prototype.setValue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.ActuateServo.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ActuateServo} returns this
 */
proto.ActuateServo.prototype.clearValue = function() {
  return jspb.Message.setOneofField(this, 3, proto.ActuateServo.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ActuateServo.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServoConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ServoConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServoConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServoConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    open: jspb.Message.getFieldWithDefault(msg, 2, 0),
    close: jspb.Message.getFieldWithDefault(msg, 3, 0),
    group: jspb.Message.getFieldWithDefault(msg, 4, 0),
    state: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServoConfig}
 */
proto.ServoConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServoConfig;
  return proto.ServoConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServoConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServoConfig}
 */
proto.ServoConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOpen(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClose(value);
      break;
    case 4:
      var value = /** @type {!proto.ServoGroup} */ (reader.readEnum());
      msg.setGroup(value);
      break;
    case 5:
      var value = /** @type {!proto.ServoState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServoConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServoConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServoConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServoConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getOpen();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getClose();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getGroup();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.ServoConfig.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ServoConfig} returns this
 */
proto.ServoConfig.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 open = 2;
 * @return {number}
 */
proto.ServoConfig.prototype.getOpen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ServoConfig} returns this
 */
proto.ServoConfig.prototype.setOpen = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 close = 3;
 * @return {number}
 */
proto.ServoConfig.prototype.getClose = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ServoConfig} returns this
 */
proto.ServoConfig.prototype.setClose = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional ServoGroup group = 4;
 * @return {!proto.ServoGroup}
 */
proto.ServoConfig.prototype.getGroup = function() {
  return /** @type {!proto.ServoGroup} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.ServoGroup} value
 * @return {!proto.ServoConfig} returns this
 */
proto.ServoConfig.prototype.setGroup = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional ServoState state = 5;
 * @return {!proto.ServoState}
 */
proto.ServoConfig.prototype.getState = function() {
  return /** @type {!proto.ServoState} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.ServoState} value
 * @return {!proto.ServoConfig} returns this
 */
proto.ServoConfig.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.ServoGroup = {
  DROP_PADA: 0
};

/**
 * @enum {number}
 */
proto.ServoState = {
  OPEN: 0,
  CLOSE: 1
};

/**
 * @enum {number}
 */
proto.FlightStabilizationMethods = {
  NONE: 0,
  WEIGHTED_AVERAGE: 1
};

goog.object.extend(exports, proto);
