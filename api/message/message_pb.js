// source: message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Battery', null, global);
goog.exportSymbol('proto.DropAlgorithm', null, global);
goog.exportSymbol('proto.Enviro', null, global);
goog.exportSymbol('proto.GPS', null, global);
goog.exportSymbol('proto.Glider', null, global);
goog.exportSymbol('proto.IMU', null, global);
goog.exportSymbol('proto.Message', null, global);
goog.exportSymbol('proto.Message.Command', null, global);
goog.exportSymbol('proto.Message.Location', null, global);
goog.exportSymbol('proto.Message.Status', null, global);
goog.exportSymbol('proto.Pitot', null, global);
goog.exportSymbol('proto.Servo', null, global);
goog.exportSymbol('proto.ServoBind', null, global);
goog.exportSymbol('proto.ServoState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Message.repeatedFields_, null);
};
goog.inherits(proto.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message.displayName = 'proto.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Pitot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Pitot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Pitot.displayName = 'proto.Pitot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IMU = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IMU, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IMU.displayName = 'proto.IMU';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GPS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GPS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GPS.displayName = 'proto.GPS';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Enviro = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Enviro, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Enviro.displayName = 'proto.Enviro';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Battery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Battery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Battery.displayName = 'proto.Battery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DropAlgorithm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DropAlgorithm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DropAlgorithm.displayName = 'proto.DropAlgorithm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Glider = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Glider, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Glider.displayName = 'proto.Glider';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Servo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Servo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Servo.displayName = 'proto.Servo';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Message.repeatedFields_ = [13,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: jspb.Message.getFieldWithDefault(msg, 1, 0),
    recipient: jspb.Message.getFieldWithDefault(msg, 2, 0),
    packetNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    time: jspb.Message.getFieldWithDefault(msg, 4, 0),
    status: jspb.Message.getFieldWithDefault(msg, 5, 0),
    pitot: (f = msg.getPitot()) && proto.Pitot.toObject(includeInstance, f),
    imu: (f = msg.getImu()) && proto.IMU.toObject(includeInstance, f),
    gps: (f = msg.getGps()) && proto.GPS.toObject(includeInstance, f),
    enviro: (f = msg.getEnviro()) && proto.Enviro.toObject(includeInstance, f),
    battery: (f = msg.getBattery()) && proto.Battery.toObject(includeInstance, f),
    dropAlgorithm: (f = msg.getDropAlgorithm()) && proto.DropAlgorithm.toObject(includeInstance, f),
    glider: (f = msg.getGlider()) && proto.Glider.toObject(includeInstance, f),
    commandsList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    servosList: jspb.Message.toObjectList(msg.getServosList(),
    proto.Servo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message;
  return proto.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Message.Location} */ (reader.readEnum());
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {!proto.Message.Location} */ (reader.readEnum());
      msg.setRecipient(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPacketNumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 5:
      var value = /** @type {!proto.Message.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 6:
      var value = new proto.Pitot;
      reader.readMessage(value,proto.Pitot.deserializeBinaryFromReader);
      msg.setPitot(value);
      break;
    case 7:
      var value = new proto.IMU;
      reader.readMessage(value,proto.IMU.deserializeBinaryFromReader);
      msg.setImu(value);
      break;
    case 8:
      var value = new proto.GPS;
      reader.readMessage(value,proto.GPS.deserializeBinaryFromReader);
      msg.setGps(value);
      break;
    case 9:
      var value = new proto.Enviro;
      reader.readMessage(value,proto.Enviro.deserializeBinaryFromReader);
      msg.setEnviro(value);
      break;
    case 10:
      var value = new proto.Battery;
      reader.readMessage(value,proto.Battery.deserializeBinaryFromReader);
      msg.setBattery(value);
      break;
    case 11:
      var value = new proto.DropAlgorithm;
      reader.readMessage(value,proto.DropAlgorithm.deserializeBinaryFromReader);
      msg.setDropAlgorithm(value);
      break;
    case 12:
      var value = new proto.Glider;
      reader.readMessage(value,proto.Glider.deserializeBinaryFromReader);
      msg.setGlider(value);
      break;
    case 13:
      var value = /** @type {!Array<!proto.Message.Command>} */ (reader.readPackedEnum());
      msg.setCommandsList(value);
      break;
    case 14:
      var value = new proto.Servo;
      reader.readMessage(value,proto.Servo.deserializeBinaryFromReader);
      msg.addServos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSender();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRecipient();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPacketNumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getPitot();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Pitot.serializeBinaryToWriter
    );
  }
  f = message.getImu();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.IMU.serializeBinaryToWriter
    );
  }
  f = message.getGps();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.GPS.serializeBinaryToWriter
    );
  }
  f = message.getEnviro();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.Enviro.serializeBinaryToWriter
    );
  }
  f = message.getBattery();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Battery.serializeBinaryToWriter
    );
  }
  f = message.getDropAlgorithm();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.DropAlgorithm.serializeBinaryToWriter
    );
  }
  f = message.getGlider();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.Glider.serializeBinaryToWriter
    );
  }
  f = message.getCommandsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      13,
      f
    );
  }
  f = message.getServosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.Servo.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Message.Location = {
  GROUND_STATION: 0,
  PLANE: 1,
  GLIDER0: 2,
  GLIDER1: 3,
  ANY: 4
};

/**
 * @enum {number}
 */
proto.Message.Status = {
  POWER_ON: 0,
  CALIBRATING: 1,
  READY: 2
};

/**
 * @enum {number}
 */
proto.Message.Command = {
  OPEN_DOORS: 0,
  CLOSE_DOORS: 1,
  DROP_PAYLOADS: 2,
  DROP_GLIDERS: 3
};

/**
 * optional Location sender = 1;
 * @return {!proto.Message.Location}
 */
proto.Message.prototype.getSender = function() {
  return /** @type {!proto.Message.Location} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Message.Location} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setSender = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Location recipient = 2;
 * @return {!proto.Message.Location}
 */
proto.Message.prototype.getRecipient = function() {
  return /** @type {!proto.Message.Location} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Message.Location} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setRecipient = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 packet_number = 3;
 * @return {number}
 */
proto.Message.prototype.getPacketNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setPacketNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 time = 4;
 * @return {number}
 */
proto.Message.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Status status = 5;
 * @return {!proto.Message.Status}
 */
proto.Message.prototype.getStatus = function() {
  return /** @type {!proto.Message.Status} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.Message.Status} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional Pitot pitot = 6;
 * @return {?proto.Pitot}
 */
proto.Message.prototype.getPitot = function() {
  return /** @type{?proto.Pitot} */ (
    jspb.Message.getWrapperField(this, proto.Pitot, 6));
};


/**
 * @param {?proto.Pitot|undefined} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setPitot = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearPitot = function() {
  return this.setPitot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasPitot = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional IMU imu = 7;
 * @return {?proto.IMU}
 */
proto.Message.prototype.getImu = function() {
  return /** @type{?proto.IMU} */ (
    jspb.Message.getWrapperField(this, proto.IMU, 7));
};


/**
 * @param {?proto.IMU|undefined} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setImu = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearImu = function() {
  return this.setImu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasImu = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional GPS gps = 8;
 * @return {?proto.GPS}
 */
proto.Message.prototype.getGps = function() {
  return /** @type{?proto.GPS} */ (
    jspb.Message.getWrapperField(this, proto.GPS, 8));
};


/**
 * @param {?proto.GPS|undefined} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setGps = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearGps = function() {
  return this.setGps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasGps = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Enviro enviro = 9;
 * @return {?proto.Enviro}
 */
proto.Message.prototype.getEnviro = function() {
  return /** @type{?proto.Enviro} */ (
    jspb.Message.getWrapperField(this, proto.Enviro, 9));
};


/**
 * @param {?proto.Enviro|undefined} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setEnviro = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearEnviro = function() {
  return this.setEnviro(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasEnviro = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Battery battery = 10;
 * @return {?proto.Battery}
 */
proto.Message.prototype.getBattery = function() {
  return /** @type{?proto.Battery} */ (
    jspb.Message.getWrapperField(this, proto.Battery, 10));
};


/**
 * @param {?proto.Battery|undefined} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setBattery = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearBattery = function() {
  return this.setBattery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasBattery = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional DropAlgorithm drop_algorithm = 11;
 * @return {?proto.DropAlgorithm}
 */
proto.Message.prototype.getDropAlgorithm = function() {
  return /** @type{?proto.DropAlgorithm} */ (
    jspb.Message.getWrapperField(this, proto.DropAlgorithm, 11));
};


/**
 * @param {?proto.DropAlgorithm|undefined} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setDropAlgorithm = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearDropAlgorithm = function() {
  return this.setDropAlgorithm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasDropAlgorithm = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Glider glider = 12;
 * @return {?proto.Glider}
 */
proto.Message.prototype.getGlider = function() {
  return /** @type{?proto.Glider} */ (
    jspb.Message.getWrapperField(this, proto.Glider, 12));
};


/**
 * @param {?proto.Glider|undefined} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setGlider = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearGlider = function() {
  return this.setGlider(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasGlider = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated Command commands = 13;
 * @return {!Array<!proto.Message.Command>}
 */
proto.Message.prototype.getCommandsList = function() {
  return /** @type {!Array<!proto.Message.Command>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<!proto.Message.Command>} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setCommandsList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {!proto.Message.Command} value
 * @param {number=} opt_index
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.addCommands = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearCommandsList = function() {
  return this.setCommandsList([]);
};


/**
 * repeated Servo servos = 14;
 * @return {!Array<!proto.Servo>}
 */
proto.Message.prototype.getServosList = function() {
  return /** @type{!Array<!proto.Servo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Servo, 14));
};


/**
 * @param {!Array<!proto.Servo>} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setServosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.Servo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Servo}
 */
proto.Message.prototype.addServos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.Servo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearServosList = function() {
  return this.setServosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Pitot.prototype.toObject = function(opt_includeInstance) {
  return proto.Pitot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Pitot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Pitot.toObject = function(includeInstance, msg) {
  var f, obj = {
    differentialPressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Pitot}
 */
proto.Pitot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Pitot;
  return proto.Pitot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Pitot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Pitot}
 */
proto.Pitot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDifferentialPressure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Pitot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Pitot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Pitot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Pitot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDifferentialPressure();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float differential_pressure = 1;
 * @return {number}
 */
proto.Pitot.prototype.getDifferentialPressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Pitot} returns this
 */
proto.Pitot.prototype.setDifferentialPressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IMU.prototype.toObject = function(opt_includeInstance) {
  return proto.IMU.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IMU} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IMU.toObject = function(includeInstance, msg) {
  var f, obj = {
    ax: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    ay: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    az: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    gx: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    gy: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    gz: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    mx: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    my: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    mz: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    yaw: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    pitch: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    roll: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IMU}
 */
proto.IMU.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IMU;
  return proto.IMU.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IMU} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IMU}
 */
proto.IMU.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAy(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAz(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGx(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGy(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGz(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMx(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMy(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMz(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYaw(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPitch(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRoll(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IMU.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IMU.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IMU} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IMU.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAx();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getAy();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getAz();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getGx();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getGy();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getGz();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getMx();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getMy();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getMz();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getYaw();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getPitch();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getRoll();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
};


/**
 * optional float ax = 1;
 * @return {number}
 */
proto.IMU.prototype.getAx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IMU} returns this
 */
proto.IMU.prototype.setAx = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float ay = 2;
 * @return {number}
 */
proto.IMU.prototype.getAy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IMU} returns this
 */
proto.IMU.prototype.setAy = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float az = 3;
 * @return {number}
 */
proto.IMU.prototype.getAz = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IMU} returns this
 */
proto.IMU.prototype.setAz = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float gx = 4;
 * @return {number}
 */
proto.IMU.prototype.getGx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IMU} returns this
 */
proto.IMU.prototype.setGx = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float gy = 5;
 * @return {number}
 */
proto.IMU.prototype.getGy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IMU} returns this
 */
proto.IMU.prototype.setGy = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float gz = 6;
 * @return {number}
 */
proto.IMU.prototype.getGz = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IMU} returns this
 */
proto.IMU.prototype.setGz = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float mx = 7;
 * @return {number}
 */
proto.IMU.prototype.getMx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IMU} returns this
 */
proto.IMU.prototype.setMx = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float my = 8;
 * @return {number}
 */
proto.IMU.prototype.getMy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IMU} returns this
 */
proto.IMU.prototype.setMy = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float mz = 9;
 * @return {number}
 */
proto.IMU.prototype.getMz = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IMU} returns this
 */
proto.IMU.prototype.setMz = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float yaw = 10;
 * @return {number}
 */
proto.IMU.prototype.getYaw = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IMU} returns this
 */
proto.IMU.prototype.setYaw = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float pitch = 11;
 * @return {number}
 */
proto.IMU.prototype.getPitch = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IMU} returns this
 */
proto.IMU.prototype.setPitch = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float roll = 12;
 * @return {number}
 */
proto.IMU.prototype.getRoll = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IMU} returns this
 */
proto.IMU.prototype.setRoll = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GPS.prototype.toObject = function(opt_includeInstance) {
  return proto.GPS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GPS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GPS.toObject = function(includeInstance, msg) {
  var f, obj = {
    fix: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    lon: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    speed: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    satellites: jspb.Message.getFieldWithDefault(msg, 5, 0),
    altitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    time: jspb.Message.getFieldWithDefault(msg, 7, 0),
    date: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GPS}
 */
proto.GPS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GPS;
  return proto.GPS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GPS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GPS}
 */
proto.GPS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFix(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLon(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSatellites(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAltitude(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GPS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GPS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GPS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GPS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFix();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getLon();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getSatellites();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getAltitude();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getDate();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional bool fix = 1;
 * @return {boolean}
 */
proto.GPS.prototype.getFix = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.GPS} returns this
 */
proto.GPS.prototype.setFix = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional float lat = 2;
 * @return {number}
 */
proto.GPS.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GPS} returns this
 */
proto.GPS.prototype.setLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float lon = 3;
 * @return {number}
 */
proto.GPS.prototype.getLon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GPS} returns this
 */
proto.GPS.prototype.setLon = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float speed = 4;
 * @return {number}
 */
proto.GPS.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GPS} returns this
 */
proto.GPS.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional uint32 satellites = 5;
 * @return {number}
 */
proto.GPS.prototype.getSatellites = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.GPS} returns this
 */
proto.GPS.prototype.setSatellites = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional float altitude = 6;
 * @return {number}
 */
proto.GPS.prototype.getAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GPS} returns this
 */
proto.GPS.prototype.setAltitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional uint32 time = 7;
 * @return {number}
 */
proto.GPS.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.GPS} returns this
 */
proto.GPS.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 date = 8;
 * @return {number}
 */
proto.GPS.prototype.getDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.GPS} returns this
 */
proto.GPS.prototype.setDate = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Enviro.prototype.toObject = function(opt_includeInstance) {
  return proto.Enviro.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Enviro} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Enviro.toObject = function(includeInstance, msg) {
  var f, obj = {
    altitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    temperature: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    pressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Enviro}
 */
proto.Enviro.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Enviro;
  return proto.Enviro.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Enviro} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Enviro}
 */
proto.Enviro.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAltitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTemperature(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPressure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Enviro.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Enviro.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Enviro} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Enviro.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAltitude();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getTemperature();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getPressure();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float altitude = 1;
 * @return {number}
 */
proto.Enviro.prototype.getAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Enviro} returns this
 */
proto.Enviro.prototype.setAltitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float temperature = 2;
 * @return {number}
 */
proto.Enviro.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Enviro} returns this
 */
proto.Enviro.prototype.setTemperature = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float pressure = 3;
 * @return {number}
 */
proto.Enviro.prototype.getPressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Enviro} returns this
 */
proto.Enviro.prototype.setPressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Battery.prototype.toObject = function(opt_includeInstance) {
  return proto.Battery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Battery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Battery.toObject = function(includeInstance, msg) {
  var f, obj = {
    voltage: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    current: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Battery}
 */
proto.Battery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Battery;
  return proto.Battery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Battery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Battery}
 */
proto.Battery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVoltage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Battery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Battery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Battery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Battery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVoltage();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getCurrent();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float voltage = 1;
 * @return {number}
 */
proto.Battery.prototype.getVoltage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Battery} returns this
 */
proto.Battery.prototype.setVoltage = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float current = 2;
 * @return {number}
 */
proto.Battery.prototype.getCurrent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Battery} returns this
 */
proto.Battery.prototype.setCurrent = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DropAlgorithm.prototype.toObject = function(opt_includeInstance) {
  return proto.DropAlgorithm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DropAlgorithm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DropAlgorithm.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeToDrop: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DropAlgorithm}
 */
proto.DropAlgorithm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DropAlgorithm;
  return proto.DropAlgorithm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DropAlgorithm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DropAlgorithm}
 */
proto.DropAlgorithm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTimeToDrop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DropAlgorithm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DropAlgorithm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DropAlgorithm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DropAlgorithm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeToDrop();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float time_to_drop = 1;
 * @return {number}
 */
proto.DropAlgorithm.prototype.getTimeToDrop = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.DropAlgorithm} returns this
 */
proto.DropAlgorithm.prototype.setTimeToDrop = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Glider.prototype.toObject = function(opt_includeInstance) {
  return proto.Glider.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Glider} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Glider.toObject = function(includeInstance, msg) {
  var f, obj = {
    pitchUp: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Glider}
 */
proto.Glider.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Glider;
  return proto.Glider.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Glider} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Glider}
 */
proto.Glider.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPitchUp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Glider.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Glider.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Glider} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Glider.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPitchUp();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool pitch_up = 1;
 * @return {boolean}
 */
proto.Glider.prototype.getPitchUp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Glider} returns this
 */
proto.Glider.prototype.setPitchUp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Servo.prototype.toObject = function(opt_includeInstance) {
  return proto.Servo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Servo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Servo.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0),
    open: jspb.Message.getFieldWithDefault(msg, 2, 0),
    close: jspb.Message.getFieldWithDefault(msg, 3, 0),
    bind: jspb.Message.getFieldWithDefault(msg, 4, 0),
    state: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Servo}
 */
proto.Servo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Servo;
  return proto.Servo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Servo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Servo}
 */
proto.Servo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOpen(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClose(value);
      break;
    case 4:
      var value = /** @type {!proto.ServoBind} */ (reader.readEnum());
      msg.setBind(value);
      break;
    case 5:
      var value = /** @type {!proto.ServoState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Servo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Servo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Servo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Servo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getOpen();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getClose();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getBind();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional uint32 number = 1;
 * @return {number}
 */
proto.Servo.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Servo} returns this
 */
proto.Servo.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 open = 2;
 * @return {number}
 */
proto.Servo.prototype.getOpen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Servo} returns this
 */
proto.Servo.prototype.setOpen = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 close = 3;
 * @return {number}
 */
proto.Servo.prototype.getClose = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Servo} returns this
 */
proto.Servo.prototype.setClose = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional ServoBind bind = 4;
 * @return {!proto.ServoBind}
 */
proto.Servo.prototype.getBind = function() {
  return /** @type {!proto.ServoBind} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.ServoBind} value
 * @return {!proto.Servo} returns this
 */
proto.Servo.prototype.setBind = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional ServoState state = 5;
 * @return {!proto.ServoState}
 */
proto.Servo.prototype.getState = function() {
  return /** @type {!proto.ServoState} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.ServoState} value
 * @return {!proto.Servo} returns this
 */
proto.Servo.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.ServoBind = {
  PAYLOAD0: 0,
  PAYLOAD1: 1,
  PAYLOAD2: 2,
  GLIDER0: 3,
  GLIDER1: 4,
  DOOR0: 5,
  DOOR1: 6
};

/**
 * @enum {number}
 */
proto.ServoState = {
  OPEN: 0,
  CLOSED: 1
};

goog.object.extend(exports, proto);
